import streamlit as st
import numpy as np
import pandas as pd
from sklearn.linear_model import Ridge
from sklearn.preprocessing import StandardScaler

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–û—Ü–µ–Ω–∫–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")

st.markdown("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")

# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=10, max_value=100, step=1)
gender = st.selectbox("–ü–æ–ª", ["Male", "Female"])
height_cm = st.number_input("–†–æ—Å—Ç (–≤ —Å–º)", min_value=100, max_value=250, step=1)
weight_kg = st.number_input("–í–µ—Å (–≤ –∫–≥)", min_value=30, max_value=200, step=1)
sleep_hours = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞ –≤ —Å—É—Ç–∫–∏", 0.0, 12.0, 7.0, step=0.1)
caffeine = st.slider("–ö–æ—Ñ–µ–∏–Ω (–∫–æ–ª-–≤–æ –∫—Ä—É–∂–µ–∫ –∫–æ—Ñ–µ –≤ –¥–µ–Ω—å)", 0, 10, 2)
activity = st.slider("–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—á–∞—Å—ã –≤ –Ω–µ–¥–µ–ª—é)", 0.0, 20.0, 3.0, step=0.5)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ BMI
height_m = height_cm / 100
bmi = weight_kg / (height_m ** 2)
bmi_category = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π"
if bmi < 18.5:
    bmi_category = "–ù–µ–¥–æ–≤–µ—Å"
elif bmi > 25:
    bmi_category = "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π"

st.markdown(f"**–í–∞—à –ò–ú–¢ (BMI):** {bmi:.1f} ‚Äî *{bmi_category}*")

# –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
X_input = pd.DataFrame({
    "Sleep_Hours": [sleep_hours],
    "Caffeine_Intake": [caffeine],
    "Physical_Activity_Level": [activity],
    "BMI": [bmi],
    "Age": [age]
})

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ: –æ–±—É—á–∞–µ–º –≤ –∫–æ–¥–µ)
# –ü—Ä–∏–º–µ—Ä –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø–æ–¥–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏–º–∏ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
X_fake = pd.DataFrame({
    "Sleep_Hours": np.random.uniform(4, 9, 100),
    "Caffeine_Intake": np.random.randint(0, 6, 100),
    "Physical_Activity_Level": np.random.uniform(0, 10, 100),
    "BMI": np.random.uniform(18, 35, 100),
    "Age": np.random.randint(18, 65, 100)
})

y_fake = pd.DataFrame({
    "Daytime_Sleepiness": np.random.uniform(0, 24, 100),
    "Stroop_Task_Reaction_Time": np.random.uniform(2, 5, 100),
    "N_Back_Accuracy": np.random.uniform(50, 100, 100),
    "PVT_Reaction_Time": np.random.uniform(250, 500, 100)
})

# –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_fake)
X_input_scaled = scaler.transform(X_input)

# –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
models = {
    'Daytime_Sleepiness': Ridge().fit(X_scaled, y_fake['Daytime_Sleepiness']),
    'Stroop': Ridge().fit(X_scaled, y_fake['Stroop_Task_Reaction_Time']),
    'N_Back': Ridge().fit(X_scaled, y_fake['N_Back_Accuracy']),
    'PVT': Ridge().fit(X_scaled, y_fake['PVT_Reaction_Time'])
}

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
preds = {name: model.predict(X_input_scaled)[0] for name, model in models.items()}

# –í—ã–≤–æ–¥
st.subheader("–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:")
st.write(f"**–î–Ω–µ–≤–Ω–∞—è —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å:** {preds['Daytime_Sleepiness']:.1f}")
st.write(f"**–í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ (Stroop):** {preds['Stroop']:.2f} —Å–µ–∫")
st.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏ (N-Back Accuracy):** {preds['N_Back']:.1f}%")
st.write(f"**–í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ (PVT):** {preds['PVT']:.0f} –º—Å")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
st.subheader("üí¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")

all_ok = True

# –°–æ–Ω
if sleep_hours < 6:
    st.warning("–í—ã —Å–ø–∏—Ç–µ –º–µ–Ω—å—à–µ 6 —á–∞—Å–æ–≤. –£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –¥–æ 6‚Äì9 —á–∞—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–∞–∫—Ü–∏–∏.")
    all_ok = False
elif sleep_hours > 9:
    st.warning("–í—ã —Å–ø–∏—Ç–µ –±–æ–ª—å—à–µ 9 —á–∞—Å–æ–≤. –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Å–æ–Ω –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –≤—è–ª–æ—Å—Ç—å. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–ø–∞—Ç—å 6‚Äì9 —á–∞—Å–æ–≤.")
    all_ok = False

# –ò–ú–¢
if bmi_category == "–ù–µ–¥–æ–≤–µ—Å":
    st.warning("–í–∞—à –≤–µ—Å –Ω–∏–∂–µ –Ω–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω –∏–ª–∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.")
    all_ok = False
elif bmi_category == "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π":
    st.warning("–í–∞—à –≤–µ—Å –≤—ã—à–µ –Ω–æ—Ä–º—ã. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π BMI ‚Äî 18.5‚Äì25.")
    all_ok = False

# –ö–æ—Ñ–µ–∏–Ω
if caffeine > 3:
    st.warning("–í—ã –ø—å—ë—Ç–µ –º–Ω–æ–≥–æ –∫–æ—Ñ–µ. –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –¥–æ 1‚Äì3 –∫—Ä—É–∂–µ–∫ –≤ –¥–µ–Ω—å ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞.")
    all_ok = False

# –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
if activity < 2:
    st.warning("–ù–∏–∑–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2‚Äì6 —á–∞—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞ –∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.")
    all_ok = False


if all_ok:
    st.success("–í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ö–æ—Ä–æ—à–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ! –í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ.")


